# Use an official Python runtime as a parent image
FROM python:3.12

LABEL maintainer="auth-service"
# Set the working directory in the container
WORKDIR /code
# Install system dependencies required for potential Python packages
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry

# Copy the current directory contents into the container at /code
COPY . /code/

# Configuration to avoid creating virtual environments inside the Docker container
RUN poetry config virtualenvs.create false

# Install dependencies including development ones
RUN poetry install

# Make port 8000 available to the world outside this container
EXPOSE 8000

# Run the app. CMD can be overridden when starting the container
# poetry run uvicorn app.main:app --host 0.0.0.0 --port 8087 --reload
# CMD ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8087" ,"--reload"]
CMD ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0","--port","8000", "--reload"]

# FROM python:3.12-slim

# WORKDIR /app


# ARG MY_ENV

# ENV MY_ENV=${MY_ENV} \
#   PYTHONFAULTHANDLER=1 \
#   PYTHONUNBUFFERED=1 \
#   PYTHONHASHSEED=random \
#   PIP_NO_CACHE_DIR=off \
#   PIP_DISABLE_PIP_VERSION_CHECK=on \
#   PIP_DEFAULT_TIMEOUT=100 \
#   # Poetry's configuration:
#   POETRY_NO_INTERACTION=1 \
#   POETRY_VIRTUALENVS_CREATE=false \
#   POETRY_CACHE_DIR='/var/cache/pypoetry' \
#   POETRY_HOME='/usr/local' \
#   POETRY_VERSION=1.8.2 


# RUN pip install poetry

# # RUN curl -sSL https://install.python-poetry.org | python3 -



# # Install dependencies with Poetry
# # COPY pyproject.toml ./app

# RUN poetry install

# COPY . /app/

# CMD ["poetry", "run", "python", "main.py"]




